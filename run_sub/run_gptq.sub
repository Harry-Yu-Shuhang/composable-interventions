#!/bin/bash
#SBATCH --partition=3090_risk
#SBATCH --nodelist=aisurrey15
#SBATCH --job-name=gptq_deepseek
#SBATCH --nodes=1
#SBATCH --ntasks=1
#SBATCH --gpus-per-node=1
#SBATCH --cpus-per-task=8
#SBATCH --time=12:00:00
#SBATCH --mem=64G
#SBATCH --output=output.log
#SBATCH --error=error.log

set -e  # 遇到错误立即退出

echo "🔍 任务开始，当前目录: $(pwd)" > output.log
cd "$SLURM_SUBMIT_DIR" || { echo "❌ 目录不存在，退出"; exit 1; }
echo "📌 进入目录: $SLURM_SUBMIT_DIR" >> output.log

export PYTORCH_CUDA_ALLOC_CONF="expandable_segments:True"

# === 加载模块系统和 CUDA/GCC ===
if [ -f /etc/profile.d/modules.sh ]; then
    source /etc/profile.d/modules.sh
fi

module load gcc/12.2.0
module load cuda/11.8
echo "✅ 加载 CUDA 和 GCC" >> output.log

# === 检查 g++ 可用性 ===
export CXX=$(which g++) || { echo "❌ g++ 未找到，GCC 模块未正确加载" >> output.log; exit 1; }

# === 检查 GPU 信息 ===
echo "🔍 GPU 设备信息：" >> output.log
nvidia-smi >> output.log 2>> error.log || echo "⚠️ GPU 检测失败" >> output.log

# === Conda 环境处理（强制删除重建）===
echo "🔁 重建 conda 环境: lm-compose" >> output.log
source ~/.bashrc

# 如果环境已存在则删除
if conda info --envs | grep -q "lm-compose"; then
    echo "🧹 删除已有环境 'lm-compose'..." >> output.log
    conda remove -n lm-compose --all -y >> output.log 2>> error.log
fi

# 创建新环境
echo "⚙️ 创建 conda 环境 'lm-compose'..." >> output.log
conda create -n lm-compose python=3.11 -y >> output.log 2>> error.log

echo "🚀 激活 conda 环境" >> output.log
conda activate lm-compose || { echo "❌ 激活失败" >> output.log; exit 1; }


# === 环境变量设置 ===
export CUDA_HOME=/usr/local/cuda
export PATH=$CUDA_HOME/bin:$PATH
export LD_LIBRARY_PATH=$CONDA_PREFIX/lib:$CUDA_HOME/lib64:$LD_LIBRARY_PATH

# === 安装依赖 ===
echo "📦 安装依赖（conda 和 pip）..." >> output.log
conda install -c conda-forge libstdcxx-ng gxx_linux-64 cmake ninja -y >> output.log 2>> error.log

which pip || { echo "❌ pip 不可用，退出" >> output.log; exit 1; }

pip install pandas gekko numpy transformers accelerate >> output.log 2>> error.log

# === 安装项目和插件 ===
pip install -e . >> output.log 2>> error.log
pip install -e AutoGPTQ || { echo "❌ 安装 AutoGPTQ 失败" >> output.log; exit 1; }
pip install -e AutoAWQ || { echo "❌ 安装 AutoAWQ 失败" >> output.log; exit 1; }

# === CUDA 扩展检查 ===
python -c "from auto_gptq.utils.import_utils import is_cuda_extension_available as check; print('✅ AutoGPTQ + CUDA Extension OK' if check() else '❌ CUDA Extension Missing')" >> output.log 2>> error.log

# === 模型检查 ===
MODEL_DIR="models/deepseek-math-7b-instruct"
if [ ! -d "$MODEL_DIR" ]; then
    echo "❌ 模型目录不存在: $MODEL_DIR" >> output.log
    echo "请先运行：huggingface-cli download deepseek-ai/deepseek-math-7b-instruct --local-dir $MODEL_DIR --local-dir-use-symlinks False" >> output.log
    exit 1
fi

# === 执行 GPTQ 压缩 ===
echo "📦 开始 GPTQ 压缩..." >> output.log
python main.py \
    model_name=$MODEL_DIR \
    interventions=[compress] \
    compress=gptq \
    wbits=4 \
    output_dir=compressed_models/deepseek-math-7b-gptq >> output.log 2>> error.log

echo "✅ 所有任务完成" >> output.log
